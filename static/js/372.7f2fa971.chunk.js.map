{"version":3,"file":"static/js/372.7f2fa971.chunk.js","mappings":"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","sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/sendForm/sendForm.js","components/contact-components/Form.js","components/contact-components/ResponseForm.js","components/Contact.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.2.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import '../../styles/Form.scss';\r\nimport { useState } from 'react';\r\nimport emailjs from 'emailjs-com';\r\n\r\nconst Form = ({ setResponse, setFormData }) => {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [formErrors, setFormErrors] = useState({\r\n        name: '',\r\n        email: '',\r\n        message: '',\r\n    });\r\n\r\n    /* const getIsFormValid = () => {\r\n        return name && email && message;\r\n    }; */\r\n\r\n    const clearForm = () => {\r\n        setName(\"\");\r\n        setEmail(\"\");\r\n        setMessage(\"\");\r\n        setFormErrors({});\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = {};\r\n\r\n        if (!name) errors.name = 'Name is required.';\r\n        if (!email) errors.email = 'Email is required.';\r\n        if (!message) errors.message = 'Message is required.';\r\n\r\n        if (Object.keys(errors).length > 0) {\r\n            setFormErrors(errors);\r\n        } else {\r\n            // Handle form submission logic here\r\n            const formData = createObject(e.target.elements);\r\n            setFormData(formData);\r\n            setResponse(true);\r\n\r\n            emailjs.sendForm('service_87n0aqh', 'template_wjfjb6t', e.target, 'dICfygEXYzd9ULcSD')\r\n                .then((result) => {\r\n                    console.log('Email sent successfully:', result.text);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error sending email:', error);\r\n                });\r\n\r\n            clearForm();\r\n        }\r\n    };\r\n\r\n    const createObject = (data) => {\r\n        return {\r\n            'Name': data['name']['value'],\r\n            'Email': data['email']['value'],\r\n            'Message': data['message']['value']\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='form'>\r\n                <form className=\"form-container\" onSubmit={handleSubmit}>\r\n                    <fieldset>\r\n                        <div className='Field'>\r\n                            <label htmlFor=\"name\">Full Name</label>\r\n                            <input type=\"text\" id=\"name\" name='user_name' aria-label=\"On Click\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n                            {formErrors.name && <span className=\"error\">{formErrors.name}</span>}\r\n                        </div>\r\n                        <div className='Field'>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input type=\"email\" id=\"email\" name='user_email' aria-label=\"On Click\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n                            {formErrors.email && <span className=\"error\">{formErrors.email}</span>}\r\n                        </div>\r\n                        <div className='Field'>\r\n                            <label htmlFor=\"message\">Message</label>\r\n                            <textarea id=\"message\" name='user_message' aria-label=\"On Click\" value={message} onChange={(e) => setMessage(e.target.value)} required />\r\n                            {formErrors.message && <span className=\"error\">{formErrors.message}</span>}\r\n                        </div>\r\n                        <div className='btn'>\r\n                            <button type=\"submit\">Send Message</button>\r\n                        </div>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;","import '../../styles/ResponseForm.scss';\r\n\r\n\r\nconst ResponseForm = ({ formData }) => {\r\n\r\n    return (\r\n        <>\r\n            <h3>Hi {formData.Name}, I've received your message! I’ll be in touch shortly!</h3>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResponseForm;","import '../styles/Contact.scss';\r\nimport { useState } from 'react';\r\nimport Form from './contact-components/Form';\r\nimport ResponseForm from './contact-components/ResponseForm';\r\n\r\nconst Contact = ({ mainClassName }) => {\r\n\r\n    const [response, setResponse] = useState(false);\r\n    const [formData, setFormData] = useState(null)\r\n\r\n    return (\r\n        <div className={mainClassName}>\r\n            <div className=\"container-contact\">\r\n                <h2>Contact Me</h2>\r\n                <div className='sub-container'>\r\n                    {!response && <Form setResponse={setResponse} setFormData={setFormData} />}\r\n                    {response && <ResponseForm formData={formData}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","sendForm","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","setResponse","setFormData","name","setName","useState","email","setEmail","message","setMessage","formErrors","setFormErrors","createObject","_jsx","_Fragment","children","className","onSubmit","e","preventDefault","errors","elements","emailjs","then","result","console","log","catch","error","_jsxs","htmlFor","type","id","value","onChange","required","Name","mainClassName","response","Form","ResponseForm"],"sourceRoot":""}